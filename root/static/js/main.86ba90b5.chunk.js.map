{"version":3,"sources":["components/TopBanner.js","components/MergeSort.js","components/QuickSort.js","components/HeapSort.js","components/BubbleSort.js","components/SortAlgoVis.js","App.js","index.js"],"names":["TopBanner","props","state","zIndex","opacity","display","openDescrip","bind","closeDescrip","this","setState","timer","setTimeout","clearTimeout","containerStyle","position","top","height","width","left","backgroundColor","marginTop","borderRadius","gridTemplateColumns","gridTemplateRows","gridTemplateAreas","style","divContainerStyle","headerStyle","id","descripButtonStyle","onClick","h1Style","pStyle","descripButton2Style","Component","justifyContent","alignItems","color","margin","gridArea","padding","fontSize","fontFamily","border","cursor","MergeSort","array","contStyle","map","value","idx","className","key","QuickSort","HeapSort","BubbleSort","resetArray","SortAlgoVis","getNewArray","keepGoing","isSorting","mergeSort","bubbleSort","heapSort","quickSort","sortAlgos","visualizeAlgos","isSorted","mA","JSON","parse","stringify","bA","hA","qA","i","length","arraysAreEqual","slice","sort","a","b","console","log","currSorted","newArray","myArray","myState","quickAnimations","quickAnim","quickSortHelper","quickSortAnimations","heapAnimations","heapAnim","currentIdx","Math","floor","siftDown","buildMaxHeap","endIdx","heapSwap","heapSortAnimations","bubbleAnimations","bubAnim","j","push","temp","bubbleSortAnimations","mergeAnimations","animations","auxiliaryArray","mergeSortHelper","mergeSortAnimations","numArray","mergeState","currState","resetClick","startIdx","pivotIdx","leftIdx","rightIdx","quickSwap","heap","childOneIdx","childTwoIdx","idxToSwap","mainArray","middleIdx","k","doMerge","size","min","max","random","App","textAlign","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.86ba90b5.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n\r\nexport class TopBanner extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            zIndex: 0,\r\n            opacity: 0,\r\n            display: \"none\"\r\n        };\r\n        this.openDescrip = this.openDescrip.bind(this);\r\n        this.closeDescrip = this.closeDescrip.bind(this);\r\n    }\r\n\r\n    openDescrip() {\r\n        this.setState((state) => { return {\r\n            zIndex: 1,\r\n            opacity: 1,\r\n            display: \"grid\"\r\n        }})\r\n    }\r\n    \r\n    closeDescrip() {\r\n        this.setState((state) => { return {\r\n            opacity: 0,\r\n            display: \"none\"\r\n        }})\r\n\r\n        const timer = setTimeout(\r\n            this.setState((state) => { return {\r\n                zIndex: 0\r\n            }}), 2000);\r\n        return () => clearTimeout(timer);\r\n    }\r\n\r\n    render() {\r\n\r\n        const containerStyle = {\r\n            position: \"absolute\",\r\n            top: \"0%\",\r\n            height: \"auto\",\r\n            width: \"50vw\",\r\n            left: \"25%\",\r\n            backgroundColor: 'black',\r\n            marginTop: '50px',\r\n            zIndex: this.state.zIndex,\r\n            borderRadius: \"20%\",\r\n            opacity: this.state.opacity,\r\n            display: this.state.display,\r\n            gridTemplateColumns: \"auto\",\r\n            gridTemplateRows: \"'70px' 'auto' '70px'\",\r\n            gridTemplateAreas: \"'header' 'body' 'close'\"\r\n\r\n        }\r\n\r\n        return (\r\n            <div style={divContainerStyle}>\r\n                <h1 style={headerStyle}>Sorting Algorithm Visualizer</h1>\r\n                <button id=\"descripButton\" style={descripButtonStyle} onClick={this.openDescrip}>Description</button>\r\n                <div id=\"descripContainer\" style={containerStyle}>\r\n                    <h1 style={h1Style}>Description</h1>\r\n                    <p style={pStyle}>This SPA application was developed using React. A single parent component has an array state that holds an array of length of 4, each index corresponding to one of the four displayed arrays. When the sort button is pressed, the array is passed to each sorting algorithm which returns an array of animation commands. The animation visualizer algorithm then pushes state updates to visualize each sorting algorithm.</p>\r\n                    <button id=\"closeButton\" style={descripButton2Style} onClick={this.closeDescrip}>Close</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst divContainerStyle = {\r\n    height: \"auto\",\r\n    width: \"auto\",\r\n    display: \"block\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    marginTop: \"50px\"\r\n}\r\n\r\nconst h1Style = {\r\n    color: \"white\",\r\n    margin: \"auto\",\r\n    gridArea: \"header\",\r\n    padding: \"10px 0px\"\r\n}\r\n\r\nconst pStyle = {\r\n    color: \"white\",\r\n    margin: \"auto\",\r\n    fontSize: 20,\r\n    gridArea: \"body\",\r\n    padding: \"10px 10px\"\r\n}\r\n\r\n\r\n\r\nconst descripButtonStyle = {\r\n    backgroundColor: \"transparent\",\r\n    fontFamily: \"Arial, Helvetica, sans-serif\",\r\n    fontSize: 15,\r\n    border: \"2px solid black\",\r\n    cursor: \"pointer\",\r\n    borderRadius: \"25%\"\r\n}\r\n\r\nconst descripButton2Style = {\r\n    backgroundColor: \"transparent\",\r\n    fontFamily: \"Arial, Helvetica, sans-serif\",\r\n    fontSize: 15,\r\n    border: \"2px solid white\",\r\n    cursor: \"pointer\",\r\n    borderRadius: \"25%\",\r\n    padding: \"3px 8px\",\r\n    margin: \"auto\",\r\n    color: \"white\",\r\n    gridArea: \"close\",\r\n    padding: \"10px 0px\"\r\n}\r\n\r\n\r\nconst headerStyle = {\r\n    fontFamily: \"Arial, Helvetica, sans-serif\",\r\n    fontSize: 25,\r\n    \r\n}\r\n\r\nconst paragraphStyle = {\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport default TopBanner\r\n","import React, { Component } from 'react';\r\nimport './MergeSort.css'\r\n\r\nexport class MergeSort extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: this.props.array\r\n        }; \r\n    }\r\n\r\n    resetArray(array) {\r\n        this.setState({array});\r\n    }\r\n  \r\n    render() {\r\n        const {array} = this.props;\r\n        \r\n        return (\r\n            <div style={contStyle}>\r\n            <h3>Merge Sort</h3>\r\n            <div>\r\n                {array[3].map((value, idx) => (\r\n                    <div \r\n                    className=\"array-bar\" \r\n                    style={{height: `${value[0]}px`, backgroundColor: `${value[1]}`}} \r\n                    key={idx}>  \r\n                    </div>\r\n                ))}\r\n            </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst contStyle = {\r\n    gridArea: \"merge\"\r\n};\r\n\r\n\r\nconst getRandomNum = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min) + min);\r\n}\r\n\r\n\r\n\r\nexport default MergeSort\r\n","import React, { Component } from 'react';\r\nimport './MergeSort.css'\r\n\r\nexport class QuickSort extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: this.props.array\r\n        }; \r\n    }\r\n\r\n    /*componentDidMount() {\r\n        const array = [];\r\n        for (let i = 0; i < 80; i++) {\r\n            array.push(getRandomNum(5, 180));\r\n        }\r\n        this.resetArray(array)\r\n    }*/\r\n\r\n    resetArray(array) {\r\n\r\n        this.setState({array});\r\n    }\r\n\r\n  \r\n    render() {\r\n        const {array} = this.props;\r\n        return (\r\n            <div style={contStyle}>\r\n            <h3>Quick Sort</h3>\r\n            <div>\r\n                {array[0].map((value, idx) => (\r\n                    <div \r\n                    className=\"array-bar\" \r\n                    style={{height: `${value[0]}px`, backgroundColor: `${value[1]}`}} \r\n                    key={idx}>  \r\n                    </div>\r\n                ))}\r\n            </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst contStyle = {\r\n    gridArea: \"quick\"\r\n}\r\n\r\n\r\nconst getRandomNum = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min) + min);\r\n}\r\n\r\nexport default QuickSort","import React, { Component } from 'react';\r\nimport './MergeSort.css'\r\n\r\nexport class HeapSort extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: this.props.array\r\n        }; \r\n    }\r\n\r\n    /*componentDidMount() {\r\n        const array = [];\r\n        for (let i = 0; i < 80; i++) {\r\n            array.push(getRandomNum(5, 180));\r\n        }\r\n        this.resetArray(array)\r\n    }*/\r\n\r\n    resetArray(array) {\r\n        this.setState({array});\r\n    }\r\n\r\n  \r\n    render() {\r\n        const {array} = this.props;\r\n        return (\r\n            <div style={contStyle}>\r\n            <h3>Heap Sort</h3>\r\n            <div>\r\n                {array[1].map((value, idx) => (\r\n                    <div \r\n                    className=\"array-bar\" \r\n                    style={{height: `${value[0]}px`, backgroundColor: `${value[1]}`}} \r\n                    key={idx}>  \r\n                    </div>\r\n                ))}\r\n            </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst contStyle = {\r\n    gridArea: \"heap\"\r\n}\r\n\r\n\r\nconst getRandomNum = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min) + min);\r\n}\r\n\r\nexport default HeapSort","import React, { Component } from 'react';\r\nimport './MergeSort.css'\r\n\r\nexport class BubbleSort extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: this.props.array\r\n        }; \r\n    }\r\n\r\n    resetArray = (array) => {\r\n        this.setState({array});\r\n    }\r\n\r\n  \r\n    render() {\r\n        const {array} = this.props;\r\n\r\n\r\n        return (\r\n            <div style={contStyle}>\r\n            <h3>Bubble Sort</h3>\r\n            <div>\r\n                {array[2].map((value, idx) => (\r\n                    <div \r\n                    className=\"array-bar\" \r\n                    style={{height: `${value[0]}px`, backgroundColor: `${value[1]}`}} \r\n                    key={idx}>  \r\n                    </div>\r\n                ))}\r\n            </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nconst contStyle = {\r\n    gridArea: \"bubble\"\r\n}\r\n\r\nconst getRandomNum = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min) + min);\r\n}\r\n\r\nexport default BubbleSort\r\n","import React, { Component } from 'react'\r\nimport MergeSort from './MergeSort';\r\nimport QuickSort from './QuickSort';\r\nimport HeapSort from './HeapSort';\r\nimport BubbleSort from './BubbleSort';\r\nimport './SortAlgoVis.css';\r\n\r\n\r\n\r\nexport class SortAlgoVis extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            array: getNewArray(30),\r\n            keepGoing: true,\r\n            isSorting: false\r\n        };\r\n        this.resetArray = this.resetArray.bind(this);\r\n        this.mergeSort = this.mergeSort.bind(this);\r\n        this.bubbleSort = this.bubbleSort.bind(this);\r\n        this.heapSort = this.heapSort.bind(this);\r\n        this.quickSort = this.quickSort.bind(this);\r\n        this.sortAlgos = this.sortAlgos.bind(this);\r\n        this.visualizeAlgos = this.visualizeAlgos.bind(this);\r\n        this.isSorted = this.isSorted.bind(this);\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray()\r\n    }\r\n\r\n    isSorted() {\r\n        const mA = JSON.parse(JSON.stringify(this.state.array[3]));\r\n        const bA = JSON.parse(JSON.stringify(this.state.array[2]));\r\n        const hA = JSON.parse(JSON.stringify(this.state.array[1]));\r\n        const qA = JSON.parse(JSON.stringify(this.state.array[0]));\r\n        for (let i = 0; i < mA.length; i++) {\r\n            mA[i] = mA[i][0];\r\n            bA[i] = bA[i][0];\r\n            hA[i] = hA[i][0];\r\n            qA[i] = qA[i][0];\r\n        }\r\n        return (arraysAreEqual(mA, mA.slice().sort((a, b)=>a-b)) && arraysAreEqual(bA, bA.slice().sort((a, b)=>a-b)) && arraysAreEqual(hA, hA.slice().sort((a, b)=>a-b)) && arraysAreEqual(qA, qA.slice().sort((a, b)=>a-b)));\r\n\r\n    }\r\n\r\n    resetClick() {\r\n        console.log(\"reset dad clicked\");\r\n    }\r\n\r\n    resetArray() {\r\n        console.log(\"reset array clicked\");\r\n        let currSorted = this.isSorted();\r\n        console.log(currSorted);\r\n        if (this.state.isSorting && !currSorted) return\r\n        const newArray = getNewArray(30);\r\n        this.setState((state) => {return {\r\n            keepGoing: false,\r\n            isSorting: false\r\n        }});\r\n        \r\n        let a = newArray;\r\n        let b = newArray;\r\n        let c = newArray;\r\n        let d = newArray;\r\n        const myArray = [a, b, c, d];\r\n        this.setState((state) => { return {\r\n            array: myArray\r\n        }})\r\n    }\r\n\r\n    sortAlgos() {\r\n        if (this.state.isSorting) return;\r\n        this.setState((state) => { return {\r\n            keepGoing: true,\r\n            isSorting: true\r\n        }});\r\n        \r\n        this.mergeSort();\r\n        this.bubbleSort();\r\n        this.heapSort();\r\n        this.quickSort();\r\n    }\r\n\r\n    quickSort() {\r\n        let myState = JSON.parse(JSON.stringify(this.state.array));\r\n        let myArray = [];\r\n        for (let i = 0; i < myState[0].length; i++) {\r\n            myArray[i] = myState[0][i][0];\r\n        }\r\n        const quickAnimations = quickSortAnimations(myArray);\r\n        this.visualizeAlgos(quickAnimations, 0);\r\n    }\r\n\r\n    heapSort() {\r\n        let myState = JSON.parse(JSON.stringify(this.state.array));\r\n        let myArray = [];\r\n        for (let i = 0; i < myState[1].length; i++) {\r\n            myArray[i] = myState[1][i][0];\r\n        }\r\n        const heapAnimations = heapSortAnimations(myArray);\r\n        this.visualizeAlgos(heapAnimations, 1);\r\n    }\r\n\r\n    bubbleSort() {\r\n        let myState = JSON.parse(JSON.stringify(this.state.array));\r\n        let myArray = [];\r\n        for (let i = 0; i < myState[2].length; i++) {\r\n            myArray[i] = myState[2][i][0];\r\n        }\r\n        const bubbleAnimations = bubbleSortAnimations(myArray);\r\n        this.visualizeAlgos(bubbleAnimations, 2);\r\n    }\r\n\r\n    mergeSort() {\r\n        let myState = JSON.parse(JSON.stringify(this.state.array));\r\n        let myArray = [];\r\n        for (let i = 0; i < myState[3].length; i++) {\r\n            myArray[i] = myState[3][i][0];\r\n        }\r\n        const mergeAnimations = mergeSortAnimations(myArray);\r\n        this.visualizeAlgos(mergeAnimations, 3);\r\n    }\r\n\r\n    visualizeAlgos(animations, numArray) {\r\n        for (let i = 0; i < animations.length; i++) {\r\n            setTimeout(() => {\r\n                if (!this.state.keepGoing) return;\r\n                let mergeState = JSON.parse(JSON.stringify(this.state.array));\r\n                if (animations[i][2] === 0) {\r\n                    if (animations[i][0] >= 0 && animations[i][1] >= 0) {\r\n                        mergeState[numArray][animations[i][0]][1] = 'red';\r\n                        mergeState[numArray][animations[i][1]][1] = 'red';\r\n                    }\r\n                } else if (animations[i][2] === 1) {\r\n                    if (animations[i][0] >= 0 && animations[i][1] >= 0) {\r\n                        mergeState[numArray][animations[i][0]][1] = 'blue';\r\n                        mergeState[numArray][animations[i][1]][1] = 'blue';\r\n                    }\r\n                } else {\r\n                    mergeState[numArray][animations[i][0]][0] = animations[i][1];\r\n                }\r\n                this.setState((state) => { return {\r\n                    array: mergeState\r\n                }});\r\n            }, i*50)\r\n        }\r\n        setTimeout(() => {\r\n            if (!this.state.keepGoing) return;\r\n            let currState = JSON.parse(JSON.stringify(this.state.array));\r\n            for (let i = 0; i < currState[numArray].length; i++) {\r\n                currState[numArray][i][1] = 'green';\r\n            }\r\n            this.setState((state) => { return {\r\n                array: currState\r\n            }});\r\n        }, animations.length*50+100)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"sortContainer\">\r\n                <div className=\"resetDad\" onClick={this.resetClick}>\r\n                <button className=\"button1Style\" onClick={this.resetArray}>Reset</button>\r\n                </div>\r\n                <div className=\"sortDad\">\r\n                <button className=\"button2Style\" onClick={this.sortAlgos}>Sort</button>\r\n                </div>\r\n                <MergeSort array={this.state.array}/>\r\n                <QuickSort array={this.state.array}/>\r\n                <HeapSort array={this.state.array}/>\r\n                <BubbleSort array={this.state.array}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction quickSortAnimations(array) {\r\n    let quickAnim = [];\r\n\r\n    quickSortHelper(array, 0, array.length - 1, quickAnim);\r\n\r\n    return quickAnim;\r\n}\r\n\r\nfunction quickSortHelper(array, startIdx, endIdx, quickAnim) {\r\n    if (startIdx >= endIdx) {\r\n        return;\r\n    }\r\n    const pivotIdx = startIdx;\r\n    let leftIdx = startIdx + 1;\r\n    let rightIdx = endIdx;\r\n    while (rightIdx >= leftIdx) {\r\n        quickAnim.push([leftIdx, pivotIdx, 0]);\r\n        quickAnim.push([leftIdx, pivotIdx, 1]);\r\n        quickAnim.push([rightIdx, pivotIdx, 0]);\r\n        quickAnim.push([rightIdx, pivotIdx, 1]);\r\n\r\n        if (array[leftIdx] > array[pivotIdx] && array[rightIdx] < array[pivotIdx]) {\r\n            quickSwap(leftIdx, rightIdx, array, quickAnim);\r\n        }\r\n        if (array[leftIdx] <= array[pivotIdx]) leftIdx++;\r\n        if (array[rightIdx] >= array[pivotIdx]) rightIdx--;\r\n    }\r\n    quickSwap(pivotIdx, rightIdx, array, quickAnim);\r\n    const leftSubArrayIsSmaller = (rightIdx - 1 - startIdx) < (endIdx - (rightIdx + 1));\r\n    if (leftSubArrayIsSmaller) {\r\n        quickSortHelper(array, startIdx, rightIdx - 1, quickAnim);\r\n        quickSortHelper(array, rightIdx + 1, endIdx, quickAnim);\r\n    } else {\r\n        quickSortHelper(array, rightIdx + 1, endIdx, quickAnim);\r\n        quickSortHelper(array, startIdx, rightIdx - 1, quickAnim);\r\n    }\r\n}\r\n\r\nfunction quickSwap(i, j, array, quickAnim) {\r\n    let temp = array[j];\r\n    array[j] = array[i];\r\n    quickAnim.push([j, array[i], 2]);    \r\n    array[i] = temp;\r\n    quickAnim.push([i, temp, 2]);\r\n\r\n}\r\n\r\nfunction heapSortAnimations(array) {\r\n    let heapAnim = []\r\n\r\n    buildMaxHeap(array, heapAnim);\r\n    for (let endIdx = array.length - 1; endIdx > 0; endIdx--) {\r\n        heapSwap(0, endIdx, array, heapAnim);\r\n        siftDown(0, endIdx - 1, array, heapAnim);\r\n    }\r\n    return heapAnim;\r\n}\r\n\r\nfunction buildMaxHeap(array, heapAnim) {\r\n    const firstParentIdx = Math.floor((array.length - 2) / 2);\r\n    for (let currentIdx = firstParentIdx; currentIdx >= 0; currentIdx--) {\r\n        siftDown(currentIdx, array.length - 1, array, heapAnim);\r\n    }\r\n}\r\n\r\nfunction siftDown(currentIdx, endIdx, heap, heapAnim) {\r\n    let childOneIdx = currentIdx * 2 + 1;\r\n    while (childOneIdx <= endIdx) {\r\n        const childTwoIdx = currentIdx * 2 + 2 <= endIdx ? currentIdx * 2 + 2 : -1;\r\n        let idxToSwap;\r\n        heapAnim.push([childTwoIdx, childOneIdx, 0]);\r\n        heapAnim.push([childTwoIdx, childOneIdx, 1]);\r\n        if (childTwoIdx !== -1 && heap[childTwoIdx] > heap[childOneIdx]) {\r\n            idxToSwap = childTwoIdx;\r\n        } else {\r\n            idxToSwap = childOneIdx;\r\n        }\r\n        heapAnim.push([idxToSwap, currentIdx, 0]);\r\n        heapAnim.push([idxToSwap, currentIdx, 1]);\r\n        if (heap[idxToSwap] > heap[currentIdx]) {\r\n            heapSwap(currentIdx, idxToSwap, heap, heapAnim);\r\n            currentIdx = idxToSwap;\r\n            childOneIdx = currentIdx * 2 + 1;\r\n        } else {\r\n            return;\r\n        }\r\n    }\r\n}\r\n\r\nfunction heapSwap(i, j, array, heapAnim) {\r\n    const temp = array[j];\r\n    array[j] = array[i];\r\n    heapAnim.push([j, array[i], 2]);\r\n    array[i] = temp;\r\n    heapAnim.push([i, temp, 2]);\r\n\r\n}\r\n\r\nfunction bubbleSortAnimations(array) {\r\n    let bubAnim = []\r\n\r\n    for (let i = array.length; i > 0; i--){\r\n        for (let j = 0; j < i-1; j++) {\r\n            bubAnim.push([j, j+1, 0]);\r\n            bubAnim.push([j, j+1, 1]);\r\n            if (array[j] > array[j+1]) {\r\n                let temp = array[j+1];\r\n                array[j+1] = array[j];\r\n                bubAnim.push([j+1, array[j], 2]);\r\n                array[j] = temp;\r\n                bubAnim.push([j, temp, 2]);\r\n            }\r\n        }\r\n    }\r\n    return bubAnim;\r\n}\r\n\r\nfunction mergeSortAnimations(array) {\r\n    let animations = [];\r\n\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n\r\n    return animations;\r\n}\r\n\r\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n        animations.push([i, j, 0]);\r\n        animations.push([i, j, 1]);\r\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n            animations.push([k, auxiliaryArray[i], 2])\r\n            mainArray[k++] = auxiliaryArray[i++];\r\n        } else {\r\n            animations.push([k, auxiliaryArray[j], 2]);\r\n            mainArray[k++] = auxiliaryArray[j++];\r\n        }\r\n    }\r\n    while (i <= middleIdx) {\r\n        animations.push([k, auxiliaryArray[i], 2]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n        animations.push([k, auxiliaryArray[j], 2]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n}\r\n\r\nconst getRandomInt = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min) + min);\r\n}\r\n\r\n\r\nconst getNewArray = (size) => {\r\n    const array = [];\r\n    for (let i = 0; i < size; i++) {\r\n        array.push([getRandomInt(5, 210), 'blue']);\r\n    }\r\n    return array;\r\n}\r\n\r\nfunction arraysAreEqual(a, b) {\r\n    if (a.length !== b.length) return false;\r\n    for (let i = 0; i < a.length; i++) {\r\n        if (a[i] !== b[i]) return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nlet myArray = getNewArray();\r\n\r\n\r\n\r\n\r\nconst buttonClick = () => {\r\n    const newArray = getNewArray();\r\n    myArray = newArray;\r\n}\r\n\r\n\r\nexport default SortAlgoVis\r\n","import React, { Component} from 'react';\nimport './App.css';\nimport TopBanner from './components/TopBanner';\nimport SortAlgoVis from './components/SortAlgoVis';\nimport './components/descriptionContainer.css'\n\nclass App extends Component {\n  render() {\n    return (\n      <div style={{textAlign: \"center\"}}>\n        <TopBanner/>\n\t\t\t  <SortAlgoVis/>\n      </div>\n    )\n  }\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('sort-vis')\n);\n"],"sourceRoot":""}